<meta charset="UTF-8">
<style>
.btn {
	float: right;
	border: 1px solid #fff;
	border-radius: 32px;
	display: inline-block;
	padding: 6px;
	font-size: 32pt;
	color: #fff;
	width: 64px;
	height: 64px;
	font-weight: 200;
	text-align: center;
}
.btn:hover {
	background-color: #fff;
	color: #2196f3;
}
* {
	margin: 0;
	padding: 0;
	line-height: 1;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
body, input, textarea {
	font-family: "Helvetica Neue", Helvetica, sans-serif;
}
body {
	background-color: #2196f3;
	color: #fff;
}
a {
	text-decoration: none;
}
p {
	margin-bottom: 16px;
}
h1, h2, h3, h4, h5, h6 { font-weight: 300; }
h1 {
	font-size: 48pt;
	font-weight: 100;
	padding: 0 16px 24px;
}
h2 { font-size: 32pt; }
h3 { font-size: 26pt; }
h4 { font-size: 20pt; }
h5 { font-size: 18pt; }
h6 { font-size: 16pt; }
.container {
	margin: 0 auto;
	width: 100%;
	max-width: 800px;
	padding: 48px;
}
.mod-text {
	line-height: 1.618;
}
.progress-bar {
	height: 16px;
	border-radius: 4px;
	width: 100%;
	background-color: rgba(0, 0, 0, 0.15);
	position: relative;
	-webkit-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
	box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
	overflow: hidden;
}
.mod-progress {
	position: absolute;
	left: 0;
	top: 0;
	bottom: 0;
	background-color: #1976d2;
	border-radius: 4px;
	text-align: center;
	color: #fff;
	font-size: 9pt;
	padding-top: 2px;
}
.value-overlay {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background: -moz-linear-gradient(top,  rgba(0,0,0,0) 0%, rgba(0,0,0,0.1) 100%);
	background: -webkit-linear-gradient(top,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.1) 100%);
	background: linear-gradient(to bottom,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.1) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#00000000', endColorstr = '#40000000', GradientType = 0);
}

.mod-state {
	opacity: 0.5;
	position: absolute;
	top: 0;
	right: 0;
	text-align: right;
	font-size: 20pt;
	font-weight: 300;
}
.module, .mod-content > * {
	-webkit-transition: color 0.15s, background-color 0.15s, box-shadow 0.15s, -webkit-box-shadow 0.15s, height 0.15s;
	-o-transition: color 0.15s, background-color 0.15s, box-shadow 0.15s, -webkit-box-shadow 0.15s, height 0.15s;
	transition: color 0.15s, background-color 0.15s, box-shadow 0.15s, -webkit-box-shadow 0.15s, height 0.15s;
	margin-bottom: 16px;
}
.mod-content > *:last-child {
	margin-bottom: 0;
}
.mod-content {
	position: relative;
	z-index: 1;
}
.mod-cover {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	background-color: #fff;
	border-radius: 8px;
	z-index: 0;
	opacity: 0.75;
	-webkit-transition: opacity 0.15s, background-color 0.15s;
	-o-transition: opacity 0.15s, background-color 0.15s;
	transition: opacity 0.15s, background-color 0.15s;
}
.module {
	padding: 24px;
	background-color: #FFF;
	border-radius: 8px;
	-webkit-box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
	margin-bottom: 24px;
	color: #212121;
	position: relative;
}
.module.progress {
	background-color: #4FC3F7;
}
.module.finished {
	background-color: #4caf50;
}
.module.failed, .module.failed .mod-progress {
	background-color: #f44336;
}
.module:hover {
	/*background-color: #fff;*/
	-webkit-box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
	cursor: pointer;
	color: #000;
}
.module:hover .mod-cover {
	opacity: 1;
}
.module:active .mod-cover {
	background-color: #aaa;
}
#nav {
	position: absolute;
	top: 8px;
	left: 8px;
}
#nav a {
	background-color: #fff;
	border-radius: 6px;
	padding: 10px 12px;
	display: inline-block;
	text-decoration: none;
	color: #2196f3;
	font-weight: 700;
	border: 1px solid #fff;
}
#nav a:hover {
	background-color: #2196f3;
	color: #fff;
}

input {
	margin-bottom: 16px;
	padding: 4px;
}
#error_message {
	display: block;
	margin-bottom: 16px;
	color: #cc0000;
}
#error_message::empty {
	display: none;
}
input.error {
	border: 2px solid #cc0000;
}
input[type="button"].btn_show {
	display: inline-block;
}
input[type="button"].btn_hide {
	display: none;
}
</style>
<script src="/socket.io/socket.io.js" type="text/javascript"></script>
<script>
	var socket = io();
	socket.on("module-update", function (module) {
		console.log(module, page);
		if (page != "login" || page != "error") {
			notify(module);
		}
		if (page == "modules" && module) {
			var modules = document.getElementsByClassName("module");
			for (var i = 0; i < modules.length; i++) {
				if (modules[i].getAttribute("id") == module._id) {
					var name = modules[i].getElementsByClassName("mod-name")[0].innerText;
					var text = modules[i].getElementsByClassName("mod-text")[0].innerText;
					var state = modules[i].getElementByClassName("mod-state")[0].innerText;
					var value = modules[i].getElementByClassName("mod-value")[0].innerText;

				} else {

				}
			}
		}
	});
	var page = "index";

	function sendRequest(url, method, data, callback) {
		var request = new XMLHttpRequest();

		request.open(
			method,
			url,
			true
		);

		request.onload = function() {
			if (this.status >= 200 && this.status < 400) {
				// Success!
				var data = JSON.parse(this.response);
				if (data.status == "success") {
					callback(data);
				} else {
					alert("Error:\n" + data.data);
				}
			} else {
				// We reached our target server, but it returned an error
			}
		};

		request.onerror = function() {
			// There was a connection error of some sort
		};

		request.setRequestHeader('Content-Type', 'application/json');
		request.setRequestHeader('Authorization', 'Basic ' + btoa(getCookie("username") + ":" + getCookie("token")));

		if (data == undefined) {
			request.send();
		} else {
			request.send(JSON.stringify(data));
		}
	}

	function getCookie(name) {
		name += "=";
		var cookies = document.cookie.split(';');

		for (var i = 0; i < cookies.length; i++) {
			var c = cookies[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1);
			}
			if (c.indexOf(name) == 0) {
				return c.substring(name.length, c.length);
			}
		}
		return undefined;
	}

	function notify(module) {
		// Let's check if the browser supports notifications
		if ("Notification" in window) {
			Notification.requestPermission(function (permission) {
				if (permission === "granted") {
					var options = {
						body: module.text + " (" + module.value + "% - " + module.urgency + " urgency)",
						icon: "/static/state_" + module.state + ".png"
					}
					var notification = new Notification(module.name, options);
				}
			});
		}
	}

</script>
