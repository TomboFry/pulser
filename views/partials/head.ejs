<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, user-scalable=no,
                               initial-scale=1.0, maximum-scale=1.0,
                               minimum-scale=1.0">
<script src="/socket.io/socket.io.js" type="text/javascript"></script>
<script>
	// Connect to the websocket
	var socket = io();
	// When a new module is received
	socket.on("module-update", function (module) {
		// Notify the user only on logged in pages
		if (page != "login" || page != "error") {
			notify(module);
		}
		// If we're on the module page, update the
		// elements on the page in real-time
		if (page == "modules" && module) {
			// Find all the modules
			var mod_elms = document.getElementsByClassName("module");
			var match = false;

			// Check for a match, if there is an module with the same name
			// as the one we just got.
			for (var i = 0; i < mod_elms.length; i++) {
				var mod = mod_elms[i];
				var name = mod.getElementsByClassName("mod-name")[0];
				// If we have a match, update its values here and now
				if (name.innerText == module.name) {
					var text    = mod.getElementsByClassName("mod-text")[0];
					var value   = mod.getElementsByClassName("mod-value")[0];
					var state   = mod.getElementsByClassName("mod-state")[0];
					var urgency = mod.getElementsByClassName("mod-urgency")[0];
					var prog    = mod.getElementsByClassName("mod-progress")[0];

					text.innerText = module.text;
					value.innerText = module.value;
					prog.style.width = module.value + "%";
					state.innerText = module.state;
					mod.className = `module ${module.state}`;
					urgency.innerText = module.urgency;

					match = true;
					break;
				}
			}

			// If there was no match
			if (!match) {
				// Create a module element
				var elm = createElement("div", [ "module", module.state ]);
				var escaped = module.name.replace(' ', '%20');
				// Set its ID to the HTML escaped name
				elm.setAttribute("id", escaped);
				// Allow it to be deleted when clicked
				elm.addEventListener("click", deleteModule(escaped));
				// Create all the inside elements, such as name and state
				var e_content = createElement("div", "mod-content");
				var e_name = createElement("h3", "mod-name", module.name);
				var e_meta = createElement("p", "mod-meta");
				var e_state = createElement("span", "mod-state", module.state);
				var e_urgency = createElement(
					"span", "mod-urgency", module.urgency
				);
				var e_text = createElement("p", "mod-text", module.text);
				var e_progressbar = createElement("div", "progress-bar");
				var e_progress = createElement("div", "mod-progress");
				if (module.value) {
					e_progress.style.width = `${module.value}%`;
				}
				var e_value = createElement("span", "mod-value", module.value);
				var e_overlay = createElement("div", "value-overlay");
				var e_cover = createElement("div", "mod-cover");

				// Append all the elements to the correct places
				e_meta.appendChild(e_state);
				e_meta.appendChild(e_urgency);

				e_progress.appendChild(e_value);
				e_progress.appendChild(e_overlay);

				e_progressbar.appendChild(e_progress);

				e_content.appendChild(e_name);
				e_content.appendChild(e_meta);
				e_content.appendChild(e_text);
				e_content.appendChild(e_progressbar);

				elm.appendChild(e_content);
				elm.appendChild(e_cover);

				// Insert the newly created element into the list of modules
				var container = document.getElementById('modules');
				container.insertBefore(elm, container.firstChild);
			}
		}
	});
	var page = "index";

	function createElement(type, classes = undefined, it = undefined) {
		// Create the element
		var elm = document.createElement(type);

		// Then add the class(es), depending on if one is provided.
		if (Array.isArray(classes)) {
			for (var i = 0; i < classes.length; i++) {
				elm.classList.add(classes[i]);
			}
		} else if (classes) {
			elm.classList.add(classes);
		}

		// The same for the innerText of the element.
		if (it) elm.innerText = it;

		// Then give the element back to the caller
		return elm;
	}

	// If we want to make a request to the API side of the server
	function sendRequest(url, method, data, callback) {
		var request = new XMLHttpRequest();

		request.open(method, url, true);

		request.onload = function() {
			// If we got a valid response then send it
			if (this.status >= 200 && this.status < 400) {
				// Success!
				var data = JSON.parse(this.response);
				var error;
				// If the status code was valid but the values provided were not
				// set the error value to let the handler know
				if (data.status != "success") {
					error = data.data;
				}
				callback(data, error);
			} else {
				callback(undefined, "The server returned an error.")
			}
		};

		request.onerror = function() {
			callback(undefined, "Unknown connection error. Please try again");
		};

		// Make sure to let the server we're sending JSON to parse it properly
		request.setRequestHeader('Content-Type', 'application/json');

		// Also set the authorisation headers to allow access.
		request.setRequestHeader(
			'Authorization',
			'Basic ' + btoa(getCookie("username") + ":" + getCookie("token"))
		);

		if (data == undefined) {
			request.send();
		} else {
			request.send(JSON.stringify(data));
		}
	}

	function getCookie(name) {
		name += "=";
		var cookies = document.cookie.split(';');

		for (var i = 0; i < cookies.length; i++) {
			var c = cookies[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1);
			}
			if (c.indexOf(name) == 0) {
				return c.substring(name.length, c.length);
			}
		}
		return undefined;
	}

	// Send a notification to the user
	function notify(module) {
		// Check if the browser supports notifications
		if ("Notification" in window) {
			// If it does, make sure we have permission to send one
			Notification.requestPermission(function (permission) {
				if (permission === "granted") {
					var options = {
						body: module.text + " (" + module.value +
						      "% - " + module.urgency + " urgency)",
						icon: "/static/state_" + module.state + ".png"
					}
					var notification = new Notification(module.name, options);
				}
			});
		}
	}

</script>
<style>
.btn {
	float: right;
	border: 1px solid #fff;
	border-radius: 32px;
	display: inline-block;
	padding: 6px;
	font-size: 32pt;
	color: #fff;
	width: 64px;
	height: 64px;
	font-weight: 200;
	text-align: center;
}
.btn:hover {
	background-color: #fff;
	color: #2196f3;
}
* {
	margin: 0;
	padding: 0;
	line-height: 1;
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
body, input, textarea {
	font-family: "Helvetica Neue", Helvetica, sans-serif;
}
body {
	background-color: #2196f3;
	color: #fff;
}
a {
	text-decoration: none;
}
p {
	margin-bottom: 16px;
}
h1, h2, h3, h4, h5, h6 { font-weight: 300; }
h1 {
	font-size: 48pt;
	font-weight: 100;
	padding: 0 16px 24px;
}
h2 { font-size: 32pt; }
h3 { font-size: 26pt; }
h4 { font-size: 20pt; }
h5 { font-size: 18pt; }
h6 { font-size: 16pt; }
.container {
	margin: 0 auto;
	width: 100%;
	max-width: 800px;
	padding: 48px;
}
.mod-text {
	line-height: 1.618;
}
.progress-bar {
	height: 16px;
	border-radius: 4px;
	width: 100%;
	background-color: rgba(0, 0, 0, 0.15);
	position: relative;
	-webkit-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
	box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
	overflow: hidden;
}
.mod-progress {
	position: absolute;
	left: 0;
	top: 0;
	bottom: 0;
	background-color: #1976d2;
	border-radius: 4px;
	text-align: center;
	color: #fff;
	font-size: 9pt;
	padding-top: 2px;
	-webkit-transition: width 0.4s;
	-o-transition: width 0.4s;
	transition: width 0.4s;
	overflow: hidden;
}
.value-overlay {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background: -moz-linear-gradient(
		top, rgba(0,0,0,0) 0%,
		rgba(0,0,0,0.1) 100%
	);
	background: -webkit-linear-gradient(
		top, rgba(0,0,0,0) 0%,
		rgba(0,0,0,0.1) 100%
	);
	background: linear-gradient(
		to bottom, rgba(0,0,0,0) 0%,
		rgba(0,0,0,0.1) 100%
	);
	filter: progid:DXImageTransform.Microsoft.gradient(
		startColorstr = '#00000000',
		endColorstr = '#40000000',
		GradientType = 0
	);
}

.mod-meta {
	opacity: 0.5;
	position: absolute;
	top: 0;
	right: 0;
	text-align: right;
	font-size: 20pt;
	font-weight: 300;
}
.mod-state, .mod-urgency {
	display: block;
}
.mod-state::before {
	content: 'state: ';
}
.mod-urgency::before {
	content: 'urgency: ';
}
.mod-value::after {
	content: '%';
}
.module, .mod-content > * {
	-webkit-transition:
		color 0.15s, background-color 0.15s,
		box-shadow 0.15s, -webkit-box-shadow 0.15s,
		height 0.15s;
	-o-transition:
		color 0.15s, background-color 0.15s,
		box-shadow 0.15s, -webkit-box-shadow 0.15s,
		height 0.15s;
	transition:
	color 0.15s, background-color 0.15s,
	box-shadow 0.15s, -webkit-box-shadow 0.15s,
	height 0.15s;
	margin-bottom: 16px;
}
.mod-content > *:last-child {
	margin-bottom: 0;
}
.mod-content {
	position: relative;
	z-index: 1;
}
.mod-cover {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	background-color: #fff;
	border-radius: 8px;
	z-index: 0;
	opacity: 0.75;
	-webkit-transition: opacity 0.15s, background-color 0.15s;
	-o-transition: opacity 0.15s, background-color 0.15s;
	transition: opacity 0.15s, background-color 0.15s;
}
.module {
	padding: 24px;
	background-color: #FFF;
	border-radius: 8px;
	-webkit-box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
	margin-bottom: 24px;
	color: #212121;
	position: relative;
}
.module.progress {
	background-color: #4FC3F7;
}
.module.finished {
	background-color: #4caf50;
}
.module.failed, .module.failed .mod-progress {
	background-color: #f44336;
}
.module:hover {
	/*background-color: #fff;*/
	-webkit-box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
	cursor: pointer;
	color: #000;
}
.module:hover .mod-cover {
	opacity: 1;
}
.module:active .mod-cover {
	background-color: #aaa;
}
#nav {
	position: absolute;
	top: 8px;
	left: 8px;
}
#nav a {
	background-color: #fff;
	border-radius: 6px;
	padding: 10px 12px;
	display: inline-block;
	text-decoration: none;
	color: #2196f3;
	font-weight: 700;
	border: 1px solid #fff;
}
#nav a:hover {
	background-color: #2196f3;
	color: #fff;
}

input {
	margin-bottom: 16px;
	padding: 4px;
}
#error_message {
	display: block;
	margin-bottom: 16px;
	color: #cc0000;
}
#error_message::empty {
	display: none;
}
input.error {
	border: 2px solid #cc0000;
}
input[type="button"].btn_show {
	display: inline-block;
}
input[type="button"].btn_hide {
	display: none;
}
</style>
